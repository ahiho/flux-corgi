package main

import (
	"fmt"
	"log"
	"os"
	"strings"

	"fluxcorgi/cmd/codegen/cmdutils"
)

const template = `// Code generated by cmd/codegen/mesh/main.go. DO NOT EDIT.
package mesh

import (
	"context"

	"google.golang.org/grpc"

${{ PROTO_PKG_IMPORT }}
)

func (sc *ServiceClient) SetupWithConn(conn grpc.ClientConnInterface) {
${{ CLIENTS_SETUP }}
}

${{ PROTO_PKG_GET_SET_CLIENTS }}`

// go run cmd/codegen/mesh/main.go pkg/proto
func main() {
	args := os.Args[1:]
	pkgDir := "pkg/proto"
	var ignorePkgs []string
	if len(args) > 0 {
		pkgDir = args[0]
	}

	if len(args) > 1 && strings.HasPrefix(args[1], "--ignores=") {
		ignorePkgs = strings.Split(args[1][len("--ignores="):], ",")
	}

	moduleName, err := cmdutils.GetModuleName()
	if err != nil {
		log.Fatalln(err)
	}

	paths, err := cmdutils.LookupDir(pkgDir)
	if err != nil {
		log.Fatalln(err)
	}
	// declare variables
	pkgImports := []string{}
	getSetClients := []string{}
	clientSetups := []string{}

	// read each file
	for _, path := range paths {
		pbb, err := os.ReadFile(path.Path)
		if err != nil {
			log.Fatalln(err)
		}
		fileLines := strings.Split(string(pbb), "\n")
		pkgName := ""
		pkgImportPath := ""
		clientName := ""
		ignore := false
		for _, fileLine := range fileLines {
			if strings.HasPrefix(fileLine, "package ") {
				pkgName = fileLine[len("package "):]
				ignore = cmdutils.IsStringInArray(ignorePkgs, pkgName)
				if ignore {
					break
				}
				pkgImportPath = "\t" + fmt.Sprintf(`%v "%v/%v"`, pkgName, moduleName, path.Dir)
			}

			if strings.HasPrefix(fileLine, "type ") && strings.HasSuffix(fileLine, "Client interface {") {
				arr := strings.Split(fileLine, " ")
				clientName = arr[1]
				// fmt.Printf("clientName: %v\n", clientName)
				ignore = cmdutils.IsStringInArray(ignorePkgs, clientName)
				break
			}

		}
		if ignore {
			continue
		}
		if !cmdutils.IsStringInArray(pkgImports, pkgImportPath) {
			pkgImports = append(pkgImports, pkgImportPath)
		}
		getSetClients = append(getSetClients, fmt.Sprintf(`func %v(ctx context.Context) %v.%v {`, clientName, pkgName, clientName))
		getSetClients = append(getSetClients, "\tsc := FromContext(ctx)")
		getSetClients = append(getSetClients, "\t"+fmt.Sprintf(`return sc.clients["%v"].(%v.%v)`, clientName, pkgName, clientName))
		getSetClients = append(getSetClients, "}")
		getSetClients = append(getSetClients, fmt.Sprintf(`func (sc *ServiceClient) Use%v(client %v.%v) {`, clientName, pkgName, clientName))
		getSetClients = append(getSetClients, "\t"+fmt.Sprintf(`sc.clients["%v"] = client`, clientName))
		getSetClients = append(getSetClients, "}")
		getSetClients = append(getSetClients, fmt.Sprintf(`func (sc *ServiceClient) %v() %v.%v {`, clientName, pkgName, clientName))
		getSetClients = append(getSetClients, "\t"+fmt.Sprintf(`return sc.clients["%v"].(%v.%v)`, clientName, pkgName, clientName))
		getSetClients = append(getSetClients, "}")
		getSetClients = append(getSetClients, "")
		clientSetups = append(clientSetups, "\t"+fmt.Sprintf(`sc.clients["%v"] = %v.New%v(conn)`, clientName, pkgName, clientName))
	}

	generatedMediator := strings.ReplaceAll(template, "${{ PROTO_PKG_IMPORT }}", strings.Join(pkgImports, "\n"))
	generatedMediator = strings.ReplaceAll(generatedMediator, "${{ PROTO_PKG_GET_SET_CLIENTS }}", strings.Join(getSetClients, "\n"))
	generatedMediator = strings.ReplaceAll(generatedMediator, "${{ CLIENTS_SETUP }}", strings.Join(clientSetups, "\n"))

	os.WriteFile("pkg/mesh/proto_generated.go", []byte(generatedMediator), 0644)
}
