// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: sandbox/sandbox.proto

package sandboxproto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ConfigSandboxRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfigSandboxRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfigSandboxRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfigSandboxRequestMultiError, or nil if none found.
func (m *ConfigSandboxRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfigSandboxRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Repo

	// no validation rules for ConfigEncoded

	if len(errors) > 0 {
		return ConfigSandboxRequestMultiError(errors)
	}

	return nil
}

// ConfigSandboxRequestMultiError is an error wrapping multiple validation
// errors returned by ConfigSandboxRequest.ValidateAll() if the designated
// constraints aren't met.
type ConfigSandboxRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigSandboxRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigSandboxRequestMultiError) AllErrors() []error { return m }

// ConfigSandboxRequestValidationError is the validation error returned by
// ConfigSandboxRequest.Validate if the designated constraints aren't met.
type ConfigSandboxRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigSandboxRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigSandboxRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigSandboxRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigSandboxRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigSandboxRequestValidationError) ErrorName() string {
	return "ConfigSandboxRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ConfigSandboxRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfigSandboxRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigSandboxRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigSandboxRequestValidationError{}

// Validate checks the field values on ConfigSandboxResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfigSandboxResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfigSandboxResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfigSandboxResponseMultiError, or nil if none found.
func (m *ConfigSandboxResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfigSandboxResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ConfigSandboxResponseMultiError(errors)
	}

	return nil
}

// ConfigSandboxResponseMultiError is an error wrapping multiple validation
// errors returned by ConfigSandboxResponse.ValidateAll() if the designated
// constraints aren't met.
type ConfigSandboxResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigSandboxResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigSandboxResponseMultiError) AllErrors() []error { return m }

// ConfigSandboxResponseValidationError is the validation error returned by
// ConfigSandboxResponse.Validate if the designated constraints aren't met.
type ConfigSandboxResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigSandboxResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigSandboxResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigSandboxResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigSandboxResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigSandboxResponseValidationError) ErrorName() string {
	return "ConfigSandboxResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ConfigSandboxResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfigSandboxResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigSandboxResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigSandboxResponseValidationError{}

// Validate checks the field values on DeploySandboxRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeploySandboxRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeploySandboxRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeploySandboxRequestMultiError, or nil if none found.
func (m *DeploySandboxRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeploySandboxRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Repo

	// no validation rules for PullRequestId

	// no validation rules for Image

	if len(errors) > 0 {
		return DeploySandboxRequestMultiError(errors)
	}

	return nil
}

// DeploySandboxRequestMultiError is an error wrapping multiple validation
// errors returned by DeploySandboxRequest.ValidateAll() if the designated
// constraints aren't met.
type DeploySandboxRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeploySandboxRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeploySandboxRequestMultiError) AllErrors() []error { return m }

// DeploySandboxRequestValidationError is the validation error returned by
// DeploySandboxRequest.Validate if the designated constraints aren't met.
type DeploySandboxRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeploySandboxRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeploySandboxRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeploySandboxRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeploySandboxRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeploySandboxRequestValidationError) ErrorName() string {
	return "DeploySandboxRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeploySandboxRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeploySandboxRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeploySandboxRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeploySandboxRequestValidationError{}

// Validate checks the field values on DeploySandboxResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeploySandboxResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeploySandboxResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeploySandboxResponseMultiError, or nil if none found.
func (m *DeploySandboxResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeploySandboxResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	// no validation rules for IsNew

	if len(errors) > 0 {
		return DeploySandboxResponseMultiError(errors)
	}

	return nil
}

// DeploySandboxResponseMultiError is an error wrapping multiple validation
// errors returned by DeploySandboxResponse.ValidateAll() if the designated
// constraints aren't met.
type DeploySandboxResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeploySandboxResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeploySandboxResponseMultiError) AllErrors() []error { return m }

// DeploySandboxResponseValidationError is the validation error returned by
// DeploySandboxResponse.Validate if the designated constraints aren't met.
type DeploySandboxResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeploySandboxResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeploySandboxResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeploySandboxResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeploySandboxResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeploySandboxResponseValidationError) ErrorName() string {
	return "DeploySandboxResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeploySandboxResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeploySandboxResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeploySandboxResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeploySandboxResponseValidationError{}
